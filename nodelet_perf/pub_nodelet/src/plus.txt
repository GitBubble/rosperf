/*
 * Copyright (c) 2009, Willow Garage, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Willow Garage, Inc. nor the names of its
 *       contributors may be used to arrival_timeorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <pluginlib/class_list_macros.h>
#include <nodelet/nodelet.h>
#include <ros/ros.h>
#include "roscpp_tutorials/perf.h"
#include "std_msgs/String.h"

namespace nodelet_tutorial_math
{
using namespace std;
int64_t send_msg_count = 0;
int64_t arrival_msg_count = 0;
struct timeval send_time;
struct timeval arrival_time;
uint64_t avg_time = 0;

#define BUFF_SIZE 1024*1024*10
#define FRAMES_NUM 1024

class Plus : public nodelet::Nodelet
{
public:
  Plus()
  : value_(0)
  {}

private:
  virtual void onInit()
  {
    ros::NodeHandle& nh = getNodeHandle();
    ros::NodeHandle& private_nh = getPrivateNodeHandle();
    private_nh.getParam("value", value_);
    //pub = private_nh.advertise<roscpp_tutorials::perf>("chatter", 1000);
	pub = private_nh.advertise<std_msgs::String>("chatter", 1000);
    sub = private_nh.subscribe("chatter_out", 10, &Plus::callback, this);
    //timers,so we dont do main work in Init 
    timer = nh.createTimer(ros::Duration(5),boost::bind(&Plus::timerCb,this,_1));


  }

  void timerCb(const ros::TimerEvent& timeevent)
  {
    /*(void)timeevent;  
    boost::shared_ptr<roscpp_tutorials::perf> iperf;
    char *buf = new char[BUFF_SIZE];
    memset(buf,96,BUFF_SIZE);


    while (send_msg_count < FRAMES_NUM)
    {
	iperf->id = send_msg_count;
	iperf->data = buf;
        gettimeofday(&send_time,NULL);
        iperf->time = send_time.tv_sec * 1000 + send_time.tv_usec/ 1000;
        pub.publish(iperf);
	send_msg_count++;
    }
    */
    cout<<send_msg_count<< " messages delivered.."<<endl;
    cout<<"pub completed...."<<endl;

  }


  //void callback(const boost::shared_ptr<const roscpp_tutorials::perf> message)
  void callback(const std_msgs::StringPtr message)
  {
    cout<<"entering"<<endl;
	/*
	++arrival_msg_count;   
    gettimeofday(&arrival_time,NULL);
    if (avg_time == 0) {
            avg_time = (arrival_time.tv_sec * 1000 + arrival_time.tv_usec / 1000 ) - message->time;                                            
	    cout<<" time: "<<  ", message id: "<< message->id << "arrived..."<<endl;
    } else {                                                                                                                      
            avg_time = (((arrival_time.tv_sec * 1000 + arrival_time.tv_usec /1000) - message->time)+ avg_time * (arrival_msg_count - 1 )) / arrival_msg_count; //pub.publish(output);
    }
    
    static uint32_t id = 0;
    if ((message->id - id ) > 1 && id != 0 ) {                                    
            cout << "............subscriber lost ..." << id << "......."<< endl;
    }

    id = message->id;
   
    //delete [](message->data);
    if(id > 1000){
	 cout<<"transport avg time: " << avg_time  << endl;
    }
   */
  }
  
  ros::Timer timer;
  ros::Publisher pub;
  ros::Subscriber sub;
  double value_;
};

PLUGINLIB_EXPORT_CLASS(nodelet_tutorial_math::Plus, nodelet::Nodelet)
}
